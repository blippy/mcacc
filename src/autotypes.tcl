#!/usr/bin/env tclsh
set struct {
	{bool 		taxable	T}
	{dstamp_t 	dstamp	.}
	{bool 		buy	B}
	{string 	folio	.}
	{string 	sym	.}
	{double 	qty	.}
	{pennies_t 	cost	.}
	{pennies_t 	ucost	.}
	{string 	ticker	.}
	{dstamp_t 	start_dstamp	.}
	{pennies_t 	start_price	.}
	{dstamp_t 	end_dstamp	.}
	{pennies_t 	end_price	.}
	{pennies_t 	prior_year_profit	.}
	{pennies_t 	vbefore	.}
	{pennies_t 	flow	.}
	{pennies_t 	profit	.}
	{pennies_t 	vto	.}

}


###### HEADER FILE

# header file
set h 0
set h [open "autotypes.h" w]

proc puth {str} {
	upvar 1 h hdr
	#lassign  [list $vals] type name conv
	puts $hdr $str
}
#puth "hello world

set warning "
// This file was automatically generated by autotypes.tcl
// Do not edit manually
"

# write preamble of file
puth "
#ifndef AUTOTYPES_H
#define AUTOTYPES_H
$warning

#include <string>
#include <vector>
#include \"types.h\"

typedef struct etrana {"


foreach row $struct {
	lassign $row type name conv
	if { $type == "string" } { set type "std::string" }
	puth "\t$type\t$name;"
}

puth "} etrana ;

bool operator<(const etrana& lhs, const etrana& rhs);

void convert(const strings &str, etrana& e);
bool same_ticker(etrana a, etrana b);
typedef std::vector<etrana> etranas_t;
etranas_t load_etranas();
extern strings etrana_fieldnames;

#endif
"
close $h


###### SOURCE FILE
# source file
#set cc 0
set cc [open "autotypes.cc" w]
proc putcc {str} {
	upvar 1 cc cc1
	puts $cc1 $str
}

putcc "
$warning

#include \"autotypes.h\"

void convert(const strings &strs, etrana& e)
{
"
set i 0
foreach row $struct {
	lassign $row type name conv
	switch $type {
		"bool" { set converter  "strs\[$i\] == \"$conv\"" }
		"double" {set converter "stod(strs\[$i\])" }
		"dstamp_t" { set converter "strs\[$i\]" }
		"pennies_t" {set converter "stod(strs\[$i\])" }
		"string" { set converter "strs\[$i\]" }
		default { set converter "*** ERROR" }
	}

	if { $name == "string" } { set name "std::string"  }
	putcc "\te.$name\t= $converter;"
	incr i
}
putcc "
}

strings etrana_fieldnames = {	
"

set i 0
foreach row $struct {
	lassign $row type name conv
	incr i
	set brk ""
	if {$i < [llength $struct]} { set brk "," }
	putcc "\t\"$name\"$brk"
}

putcc "
};
"

close $cc

